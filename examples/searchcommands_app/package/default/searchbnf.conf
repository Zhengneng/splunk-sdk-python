# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)

[countmatches-command]
syntax = countmatches fieldname=<field> pattern=<regular_expression> <field-list>
alias =
shortdesc = Counts the number of non-overlapping matches to a regular expression in a search result.
description = A count of the number of non-overlapping matches to the regular expression specified by pattern is \
    computed for each record processed. The result is stored in the field specified by fieldname. If fieldname exists, \
    its value is replaced. If fieldname does not exist, it is created. Results are otherwise passed through to the \
    next pipeline processor unmodified.
comment1 = Count the number of words in the text of each tweet in the tweets lookup table and put the result in \
    word_count.
example1 = | inputlookup tweets | countmatches fieldname=word_count pattern="\\w+" text
category =
appears-in = 5.0
maintainer = dnoble
usage = public
related =
tags = searchcommands_app

[generatetext-command]
syntax = generatetext count=<event_count> text=<string>
alias =
shortdesc = Generates a sequence of text strings.
description =
comment1 =
example1 = | generatetext count=10 text="Hello world!"
category =
appears-in = 6.3
maintainer = dnoble
usage = public
related =
tags = searchcommands_app

[pypygeneratetext-command]
syntax = pypygeneratetext count=<event_count> text=<string>
alias =
shortdesc = Generates a sequence of text strings under control of PyPy.
description =
comment1 =
example1 = | pypygeneratetext count=10 text="Hello world!"
category =
appears-in = 6.3
maintainer = dnoble
usage = public
related =
tags = searchcommands_app

[simulate-command]
syntax = simulate csv=<path> rate=<expected_event_count> interval=<sampling_period> duration=<execution_period> \
    [seed=<string>]
alias =
shortdesc = Generates a sequence of events drawn from a CSV file using repeated random sampling.
description = This command uses repeated random samples of the event records in csv for the execution period of \
    duration. Sample sizes are determined for each time interval in duration using a Poisson distribution with an \
    average rate specifying the expected event count during interval.
comment1 = Generate events drawn by repeated random sampling of events from tweets.csv. Events are drawn at an average \
    rate of 50 per second for a duration of 5 seconds. Events are piped to the example countmatches command which adds \
    a word_count field containing the number of words in the text field of each event. The mean and standard deviation \
    of the word_count are then computed by the builtin stats command.
example1 = | simulate csv=population.csv rate=50 interval=00:00:01 duration=00:00:05 \
           | countmatches fieldname=word_count pattern="\\w+" text \
           | stats mean(word_count) stdev(word_count)
category =
appears-in = 5.0
maintainer = dnoble
usage = public
related = stats
tags = searchcommands_app

[sum-command]
syntax = sum total=<field> <field-list>
alias =
shortdesc = Computes the sum of a set of fields.
description = The total produced is sum(sum(fieldname, 1, n), 1, N) where n = number of fields, N = number of records.
comment1 = This example computes the total linecount in the first 200 records in the _internal index.
example1 = | inputlookup tweets \
           | countmatches fieldname=word_count pattern="\\w+" text \
           | sum total=word_counts word_count
category = reporting
appears-in = 5.0
maintainer = dnoble
usage = public
related = stats
tags = searchcommands_app
